--- minecraft/src/net/minecraft/entity/Entity.java
+++ src/main/java/net/minecraft/entity/Entity.java
@@ -1,7 +1,9 @@
 package net.minecraft.entity;
 
+import lombok.*;
+
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.util.Collection;
 import java.util.Collections;
@@ -74,10 +76,11 @@
 import net.minecraft.world.Teleporter;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.fountainmc.entity.WetEntity;
 
 public abstract class Entity implements ICommandSender {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final AxisAlignedBB ZERO_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
    private static double renderDistanceWeight = 1.0D;
@@ -157,10 +160,14 @@
    private final CommandResultStats cmdResultStats;
    private final List<ItemStack> emptyItemStackList;
    protected boolean glowing;
    private final Set<String> tags;
    private boolean isPositionDirty;
+   // Fountain start
+   @Getter(lazy = true)
+   private final WetEntity fountainEntity = WetEntity.createEntity(this);
+   // Fountain end
 
    public Entity(World var1) {
       this.entityId = nextEntityID++;
       this.riddenByEntities = Lists.newArrayList();
       this.boundingBox = ZERO_AABB;
@@ -228,11 +235,11 @@
    public boolean equals(Object var1) {
       return var1 instanceof Entity?((Entity)var1).entityId == this.entityId:false;
    }
 
    public int hashCode() {
-      return this.entityId;
+      return this.getUniqueID().hashCode(); // Fountain -> switch from 'entityId' to 'getUniqueId().hashCode()' for a higher quality hash code
    }
 
    public void setDead() {
       this.isDead = true;
    }
@@ -484,11 +491,11 @@
          for(int var23 = var54.size(); var22 < var23; ++var22) {
             var3 = ((AxisAlignedBB)var54.get(var22)).calculateYOffset(this.getEntityBoundingBox(), var3);
          }
 
          this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, var3, 0.0D));
-         var22 = this.onGround || var15 != var3 && var15 < 0.0D;
+         boolean var22b = this.onGround || var15 != var3 && var15 < 0.0D;
          int var56 = 0;
 
          for(int var24 = var54.size(); var56 < var24; ++var56) {
             var1 = ((AxisAlignedBB)var54.get(var56)).calculateXOffset(this.getEntityBoundingBox(), var1);
          }
@@ -499,11 +506,11 @@
          for(int var60 = var54.size(); var56 < var60; ++var56) {
             var5 = ((AxisAlignedBB)var54.get(var56)).calculateZOffset(this.getEntityBoundingBox(), var5);
          }
 
          this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, 0.0D, var5));
-         if(this.stepHeight > 0.0F && var22 && (var13 != var1 || var17 != var5)) {
+         if(this.stepHeight > 0.0F && var22b && (var13 != var1 || var17 != var5)) {
             double var58 = var1;
             double var25 = var3;
             double var27 = var5;
             AxisAlignedBB var29 = this.getEntityBoundingBox();
             this.setEntityBoundingBox(var21);
@@ -1426,14 +1433,20 @@
          this.riddenByEntities.remove(var1);
          var1.rideCooldown = 60;
       }
    }
 
-   protected boolean canFitPassenger(Entity var1) {
-      return this.getPassengers().size() < 1;
+   // Foutain start
+   public int getMaxPassengers() {
+      return 1;
    }
 
+   public final boolean canFitPassenger(Entity var1) {
+      return this.getPassengers().size() < getMaxPassengers();
+      // Fountain end
+   }
+
    public float getCollisionBorderSize() {
       return 0.0F;
    }
 
    public Vec3d getLookVec() {
@@ -2058,11 +2071,11 @@
    }
 
    private <T extends Entity> void getRecursivePassengersByType(Class<T> var1, Set<T> var2) {
       for(Entity var4 : this.getPassengers()) {
          if(var1.isAssignableFrom(var4.getClass())) {
-            var2.add(var4);
+            var2.add((T)var4);
          }
 
          var4.getRecursivePassengersByType(var1, var2);
       }
 
