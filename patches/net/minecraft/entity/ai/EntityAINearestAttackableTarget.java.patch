--- minecraft/src/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
+++ src/main/java/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
@@ -51,20 +51,20 @@
 
    public boolean shouldExecute() {
       if(this.targetChance > 0 && this.taskOwner.getRNG().nextInt(this.targetChance) != 0) {
          return false;
       } else if(this.targetClass != EntityPlayer.class && this.targetClass != EntityPlayerMP.class) {
-         List var1 = this.taskOwner.worldObj.getEntitiesWithinAABB(this.targetClass, this.getTargetableArea(this.getTargetDistance()), this.targetEntitySelector);
+         List<T> var1 = this.taskOwner.worldObj.getEntitiesWithinAABB(this.targetClass, this.getTargetableArea(this.getTargetDistance()), this.targetEntitySelector);
          if(var1.isEmpty()) {
             return false;
          } else {
             Collections.sort(var1, this.theNearestAttackableTargetSorter);
-            this.targetEntity = (EntityLivingBase)var1.get(0);
+            this.targetEntity = var1.get(0);
             return true;
          }
       } else {
-         this.targetEntity = this.taskOwner.worldObj.getNearestAttackablePlayer(this.taskOwner.posX, this.taskOwner.posY + (double)this.taskOwner.getEyeHeight(), this.taskOwner.posZ, this.getTargetDistance(), this.getTargetDistance(), new Function<EntityPlayer, Double>() {
+         this.targetEntity = (T) this.taskOwner.worldObj.getNearestAttackablePlayer(this.taskOwner.posX, this.taskOwner.posY + (double)this.taskOwner.getEyeHeight(), this.taskOwner.posZ, this.getTargetDistance(), this.getTargetDistance(), new Function<EntityPlayer, Double>() {
             @Nullable
             public Double apply(@Nullable EntityPlayer var1) {
                ItemStack var2 = var1.getItemStackFromSlot(EntityEquipmentSlot.HEAD);
                if(var2 != null && var2.getItem() == Items.SKULL) {
                   int var3 = var2.getItemDamage();
@@ -76,11 +76,11 @@
                   }
                }
 
                return Double.valueOf(1.0D);
             }
-         }, this.targetEntitySelector);
+         }, (Predicate<EntityPlayer>)((Predicate<T>) this.targetEntitySelector));
          return this.targetEntity != null;
       }
    }
 
    protected AxisAlignedBB getTargetableArea(double var1) {
