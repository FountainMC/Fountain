--- minecraft/src/net/minecraft/server/MinecraftServer.java
+++ src/main/java/net/minecraft/server/MinecraftServer.java
@@ -80,10 +80,13 @@
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.fountainmc.api.Blocks;
+import org.fountainmc.api.Fountain;
+import org.fountainmc.api.event.server.ServerStartEvent;
 
 public abstract class MinecraftServer implements Runnable, ICommandSender, IThreadListener, ISnooperInfo {
    private static final Logger LOG = LogManager.getLogger();
    public static final File USER_CACHE_FILE = new File("usercache.json");
    private final ISaveFormat anvilConverterForAnvilFile;
@@ -135,10 +138,16 @@
    private long nanoTimeSinceStatusRefresh = 0L;
    protected final Queue<FutureTask<?>> futureTaskQueue = Queues.newArrayDeque();
    private Thread serverThread;
    private long currentTime = getCurrentTimeMillis();
 
+   private static DedicatedServer dedicatedServer = null;
+
+   public static DedicatedServer getDedicatedServer() {
+       return dedicatedServer;
+   }
+
    public MinecraftServer(File var1, Proxy var2, DataFixer var3, YggdrasilAuthenticationService var4, MinecraftSessionService var5, GameProfileRepository var6, PlayerProfileCache var7) {
       this.serverProxy = var2;
       this.authService = var4;
       this.sessionService = var5;
       this.profileRepo = var6;
@@ -243,14 +252,10 @@
       this.setDifficultyForAllWorlds(this.getDifficulty());
       this.initialWorldChunkLoad();
    }
 
    protected void initialWorldChunkLoad() {
-      boolean var1 = true;
-      boolean var2 = true;
-      boolean var3 = true;
-      boolean var4 = true;
       int var5 = 0;
       this.setUserMessage("menu.generatingTerrain");
       byte var6 = 0;
       LOG.info("Preparing start region for level " + var6);
       WorldServer var7 = this.worldServers[var6];
@@ -322,10 +327,12 @@
       }
 
    }
 
    protected void stopServer() {
+      Fountain.getServer().getPluginManager()
+              .fireEvent(new org.fountainmc.api.event.server.ServerStopEvent());
       LOG.info("Stopping server");
       if(this.getNetworkSystem() != null) {
          this.getNetworkSystem().terminateEndpoints();
       }
 
@@ -532,11 +539,11 @@
 
    public void updateTimeLightAndEntities() {
       this.theProfiler.startSection("jobs");
       synchronized(this.futureTaskQueue) {
          while(!this.futureTaskQueue.isEmpty()) {
-            Util.runTask((FutureTask)this.futureTaskQueue.poll(), LOG);
+            Util.runTask((FutureTask<?>)this.futureTaskQueue.poll(), LOG);
          }
       }
 
       this.theProfiler.endStartSection("levels");
 
@@ -676,15 +683,22 @@
          if(var1 && !GraphicsEnvironment.isHeadless()) {
             var12.setGuiEnabled();
          }
 
          var12.startServerThread();
+         // Fountain start
+         Blocks.registerBlocks();
+         LogManager.getLogger().info("Loading plugins...");
+         Fountain.getServer().getPluginManager().loadPlugins(new File("plugins"));
+         Fountain.getServer().getPluginManager().fireEvent(new ServerStartEvent(Fountain.getServer()));
+         // Fountain end
          Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread") {
             public void run() {
                var12.stopServer();
             }
          });
+         dedicatedServer = var12;
       } catch (Exception var14) {
          LOG.fatal("Failed to start the minecraft server", var14);
       }
 
    }
@@ -744,11 +758,11 @@
       }
 
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return "fountain"; // Fountain
    }
 
    public CrashReport addServerInfoToCrashReport(CrashReport var1) {
       var1.getCategory().setDetail("Profiler Position", new ICrashReportDetail<String>() {
          public String call() throws Exception {
@@ -765,11 +779,11 @@
 
       return var1;
    }
 
    public List<String> getTabCompletions(ICommandSender var1, String var2, @Nullable BlockPos var3, boolean var4) {
-      ArrayList var5 = Lists.newArrayList();
+      ArrayList<String> var5 = Lists.newArrayList();
       boolean var6 = var2.startsWith("/");
       if(var6) {
          var2 = var2.substring(1);
       }
 
@@ -784,11 +798,11 @@
          }
 
          return var5;
       } else {
          boolean var7 = !var2.contains(" ");
-         List var8 = this.commandManager.getTabCompletionOptions(var1, var2, var3);
+         List<String> var8 = this.commandManager.getTabCompletionOptions(var1, var2, var3);
          if(!var8.isEmpty()) {
             for(String var10 : var8) {
                if(var7) {
                   var5.add("/" + var10);
                } else {
@@ -1160,11 +1174,11 @@
    }
 
    public <V> ListenableFuture<V> callFromMainThread(Callable<V> var1) {
       Validate.notNull(var1);
       if(!this.isCallingFromMinecraftThread() && !this.isServerStopped()) {
-         ListenableFutureTask var2 = ListenableFutureTask.create(var1);
+         ListenableFutureTask<V> var2 = ListenableFutureTask.create(var1);
          synchronized(this.futureTaskQueue) {
             this.futureTaskQueue.add(var2);
             return var2;
          }
       } else {
