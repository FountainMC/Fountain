--- minecraft/src/net/minecraft/world/World.java
+++ src/main/java/net/minecraft/world/World.java
@@ -68,10 +68,13 @@
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.MapStorage;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.storage.loot.LootTableManager;
 
+import org.fountainmc.WetServer;
+import org.fountainmc.world.WetWorld;
+
 public abstract class World implements IBlockAccess {
    private int seaLevel = 63;
    protected boolean scheduledUpdatesAreImmediate;
    public final List<Entity> loadedEntityList = Lists.newArrayList();
    protected final List<Entity> unloadedEntityList = Lists.newArrayList();
@@ -109,11 +112,18 @@
    protected boolean spawnHostileMobs;
    protected boolean spawnPeacefulMobs;
    private boolean processingLoadedTiles;
    private final WorldBorder worldBorder;
    int[] lightUpdateBlockList;
+   // Fountain start
+   private final WetWorld fountainWorld = new WetWorld(WetServer.getInstance(), this);
 
+   public WetWorld getFountainWorld() {
+      return fountainWorld;
+   }
+   // Fountain end
+
    protected World(ISaveHandler var1, WorldInfo var2, WorldProvider var3, Profiler var4, boolean var5) {
       this.eventListeners = Lists.newArrayList(new IWorldEventListener[]{this.pathListener});
       this.theCalendar = Calendar.getInstance();
       this.worldScoreboard = new Scoreboard();
       this.spawnHostileMobs = true;
@@ -1982,27 +1992,27 @@
 
       return var4;
    }
 
    public <T extends Entity> List<T> getEntities(Class<? extends T> var1, Predicate<? super T> var2) {
-      ArrayList var3 = Lists.newArrayList();
+      ArrayList<T> var3 = Lists.newArrayList();
 
       for(Entity var5 : this.loadedEntityList) {
-         if(var1.isAssignableFrom(var5.getClass()) && var2.apply(var5)) {
-            var3.add(var5);
+         if(var1.isAssignableFrom(var5.getClass()) && var2.apply((T) var5)) {
+            var3.add((T) var5);
          }
       }
 
       return var3;
    }
 
    public <T extends Entity> List<T> getPlayers(Class<? extends T> var1, Predicate<? super T> var2) {
-      ArrayList var3 = Lists.newArrayList();
+      ArrayList<T> var3 = Lists.newArrayList();
 
       for(Entity var5 : this.playerEntities) {
-         if(var1.isAssignableFrom(var5.getClass()) && var2.apply(var5)) {
-            var3.add(var5);
+         if(var1.isAssignableFrom(var5.getClass()) && var2.apply((T) var5)) {
+            var3.add((T) var5);
          }
       }
 
       return var3;
    }
