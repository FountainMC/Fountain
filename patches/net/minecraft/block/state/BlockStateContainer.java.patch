--- minecraft/src/net/minecraft/block/state/BlockStateContainer.java
+++ src/main/java/net/minecraft/block/state/BlockStateContainer.java
@@ -44,11 +44,11 @@
 
 public class BlockStateContainer {
    private static final Pattern a = Pattern.compile("^[a-z0-9_]+$");
    private static final Function<IProperty<?>, String> b = new Function<IProperty<?>, String>() {
       @Nullable
-      public String a(@Nullable IProperty<?> var1) {
+      public String apply(@Nullable IProperty<?> var1) {
          return var1 == null?"<NULL>":var1.a();
       }
    };
    private final Block c;
    private final ImmutableSortedMap<String, IProperty<?>> d;
@@ -63,11 +63,11 @@
          var3.put(var7.a(), var7);
       }
 
       this.d = ImmutableSortedMap.copyOf(var3);
       LinkedHashMap var11 = Maps.newLinkedHashMap();
-      ArrayList var12 = Lists.newArrayList();
+      ArrayList<BlockStateContainer.BlockData> var12 = Lists.newArrayList();
 
       for(List var8 : Cartesian.a(this.e())) {
          Map var9 = MapPopulator.b(this.d.values(), var8);
          BlockStateContainer.BlockData var10 = new BlockStateContainer.BlockData(var1, ImmutableMap.copyOf(var9));
          var11.put(var9, var10);
@@ -85,11 +85,11 @@
       String var2 = var1.a();
       if(!a.matcher(var2).matches()) {
          throw new IllegalArgumentException("Block: " + var0.getClass() + " has invalidly named property: " + var2);
       } else {
          for(Comparable var4 : var1.c()) {
-            String var5 = var1.a(var4);
+            String var5 = var1.a((T) var4);
             if(!a.matcher(var5).matches()) {
                throw new IllegalArgumentException("Block: " + var0.getClass() + " has property: " + var2 + " with invalidly named value: " + var5);
             }
          }
 
@@ -189,16 +189,16 @@
 
       public void a(Map<Map<IProperty<?>, Comparable<?>>, BlockStateContainer.BlockData> var1) {
          if(this.c != null) {
             throw new IllegalStateException();
          } else {
-            HashBasedTable var2 = HashBasedTable.create();
+            HashBasedTable<IProperty<?>, Comparable<?>, BlockStateContainer.BlockData> var2 = HashBasedTable.create();
 
-            for(Entry var4 : this.b.entrySet()) {
-               IProperty var5 = (IProperty)var4.getKey();
+            for(Entry<IProperty<?>, Comparable<?>> var4 : this.b.entrySet()) {
+               IProperty<?> var5 = var4.getKey();
 
-               for(Comparable var7 : var5.c()) {
+               for(Comparable<?> var7 : var5.c()) {
                   if(var7 != var4.getValue()) {
                      var2.put(var5, var7, var1.get(this.b(var5, var7)));
                   }
                }
             }
