--- minecraft/src/net/minecraft/command/EntitySelector.java
+++ src/main/java/net/minecraft/command/EntitySelector.java
@@ -56,15 +56,15 @@
       return (T)(var3.size() == 1?(Entity)var3.get(0):null);
    }
 
    @Nullable
    public static ITextComponent matchEntitiesToTextComponent(ICommandSender var0, String var1) {
-      List var2 = matchEntities(var0, var1, Entity.class);
+      List<Entity> var2 = matchEntities(var0, var1, Entity.class);
       if(var2.isEmpty()) {
          return null;
       } else {
-         ArrayList var3 = Lists.newArrayList();
+         ArrayList<ITextComponent> var3 = Lists.newArrayList();
 
          for(Entity var5 : var2) {
             var3.add(var5.getDisplayName());
          }
 
@@ -73,23 +73,23 @@
    }
 
    public static <T extends Entity> List<T> matchEntities(ICommandSender var0, String var1, Class<? extends T> var2) {
       Matcher var3 = TOKEN_PATTERN.matcher(var1);
       if(var3.matches() && var0.canCommandSenderUseCommand(1, "@")) {
-         Map var4 = getArgumentMap(var3.group(2));
+         Map<String, String> var4 = getArgumentMap(var3.group(2));
          if(!isEntityTypeValid(var0, var4)) {
             return Collections.emptyList();
          } else {
             String var5 = var3.group(1);
             BlockPos var6 = getBlockPosFromArguments(var4, var0.getPosition());
             Vec3d var7 = getPosFromArguments(var4, var0.getPositionVector());
-            List var8 = getWorlds(var0, var4);
-            ArrayList var9 = Lists.newArrayList();
+            List<World> var8 = getWorlds(var0, var4);
+            ArrayList<Entity> var9 = Lists.newArrayList();
 
             for(World var11 : var8) {
                if(var11 != null) {
-                  ArrayList var12 = Lists.newArrayList();
+                  ArrayList<Predicate<Entity>> var12 = Lists.newArrayList();
                   var12.addAll(getTypePredicates(var4, var5));
                   var12.addAll(getXpLevelPredicates(var4));
                   var12.addAll(getGamemodePredicates(var4));
                   var12.addAll(getTeamPredicates(var4));
                   var12.addAll(getScorePredicates(var0, var4));
@@ -99,11 +99,11 @@
                   var12.addAll(getRotationsPredicates(var4));
                   var9.addAll(filterResults(var4, var2, var12, var5, var11, var6));
                }
             }
 
-            return getEntitiesFromPredicates(var9, var4, var0, var2, var5, var7);
+            return (List<T>) getEntitiesFromPredicates(var9, var4, var0, var2, var5, var7);
          }
       } else {
          return Collections.emptyList();
       }
    }
@@ -132,16 +132,16 @@
       }
    }
 
    private static List<Predicate<Entity>> getTypePredicates(Map<String, String> var0, String var1) {
       ArrayList var2 = Lists.newArrayList();
-      final String var3 = getArgument(var0, "type");
+      String var3 = getArgument(var0, "type");
       final boolean var4 = var3 != null && var3.startsWith("!");
       if(var4) {
          var3 = var3.substring(1);
       }
-
+      final String var3f = var3;
       boolean var6 = !var1.equals("e");
       boolean var7 = var1.equals("r") && var3 != null;
       if((var3 == null || !var1.equals("e")) && !var7) {
          if(var6) {
             var2.add(new Predicate<Entity>() {
@@ -151,11 +151,11 @@
             });
          }
       } else {
          var2.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
-               return EntityList.isStringEntityName(var1, var3) != var4;
+               return EntityList.isStringEntityName(var1, var3f) != var4;
             }
          });
       }
 
       return var2;
@@ -190,61 +190,62 @@
          final boolean var3 = var2.startsWith("!");
          if(var3) {
             var2 = var2.substring(1);
          }
 
-         final WorldSettings.a var4;
+         WorldSettings.a var4;
          try {
             int var5 = Integer.parseInt(var2);
             var4 = WorldSettings.a.parseGameTypeWithDefault(var5, WorldSettings.a.NOT_SET);
          } catch (Throwable var6) {
             var4 = WorldSettings.a.parseGameTypeWithDefault(var2, WorldSettings.a.NOT_SET);
          }
 
+         final WorldSettings.a var4f = var4;
          var1.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
                if(!(var1 instanceof EntityPlayerMP)) {
                   return false;
                } else {
                   EntityPlayerMP var2 = (EntityPlayerMP)var1;
                   WorldSettings.a var3x = var2.interactionManager.getGameType();
-                  return var3?var3x != var4:var3x == var4;
+                  return var3?var3x != var4f:var3x == var4f;
                }
             }
          });
          return var1;
       }
    }
 
    private static List<Predicate<Entity>> getTeamPredicates(Map<String, String> var0) {
       ArrayList var1 = Lists.newArrayList();
-      final String var2 = getArgument(var0, "team");
+      String var2 = getArgument(var0, "team");
       final boolean var3 = var2 != null && var2.startsWith("!");
       if(var3) {
          var2 = var2.substring(1);
       }
-
+      final String var2f = var2;
       if(var2 != null) {
          var1.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
                if(!(var1 instanceof EntityLivingBase)) {
                   return false;
                } else {
                   EntityLivingBase var2x = (EntityLivingBase)var1;
                   Team var3x = var2x.getTeam();
                   String var4 = var3x == null?"":var3x.getRegisteredName();
-                  return var4.equals(var2) != var3;
+                  return var4.equals(var2f) != var3;
                }
             }
          });
       }
 
       return var1;
    }
 
    private static List<Predicate<Entity>> getScorePredicates(final ICommandSender var0, Map<String, String> var1) {
-      final Map var2 = getScoreMap(var1);
+      final Map<String, Integer> var2 = getScoreMap(var1);
       return (List<Predicate<Entity>>)(var2.isEmpty()?Collections.emptyList():Lists.newArrayList(new Predicate[]{new Predicate<Entity>() {
          public boolean apply(@Nullable Entity var1) {
             if(var1 == null) {
                return false;
             } else {
@@ -285,39 +286,39 @@
       }}));
    }
 
    private static List<Predicate<Entity>> getNamePredicates(Map<String, String> var0) {
       ArrayList var1 = Lists.newArrayList();
-      final String var2 = getArgument(var0, "name");
+      String var2 = getArgument(var0, "name");
       final boolean var3 = var2 != null && var2.startsWith("!");
       if(var3) {
          var2 = var2.substring(1);
       }
-
+      final String var2f = var2;
       if(var2 != null) {
          var1.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
-               return var1 != null && var1.getName().equals(var2) != var3;
+               return var1 != null && var1.getName().equals(var2f) != var3;
             }
          });
       }
 
       return var1;
    }
 
    private static List<Predicate<Entity>> getTagPredicates(Map<String, String> var0) {
       ArrayList var1 = Lists.newArrayList();
-      final String var2 = getArgument(var0, "tag");
+      String var2 = getArgument(var0, "tag");
       final boolean var3 = var2 != null && var2.startsWith("!");
       if(var3) {
          var2 = var2.substring(1);
       }
-
+      final String var2f = var2;
       if(var2 != null) {
          var1.add(new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
-               return var1 == null?false:("".equals(var2)?var1.getTags().isEmpty() != var3:var1.getTags().contains(var2) != var3);
+               return var1 == null?false:("".equals(var2f)?var1.getTags().isEmpty() != var3:var1.getTags().contains(var2f) != var3);
             }
          });
       }
 
       return var1;
@@ -444,11 +445,11 @@
          });
       }
 
       Entity var7 = var2.getCommandSenderEntity();
       if(var7 != null && var3.isAssignableFrom(var7.getClass()) && var6 == 1 && ((List)var0).contains(var7) && !"r".equals(var4)) {
-         var0 = Lists.newArrayList(new Entity[]{var7});
+         var0 = (List<T>) Lists.newArrayList(new Entity[]{var7});
       }
 
       if(var6 != 0) {
          if(var6 < 0) {
             Collections.reverse((List)var0);
