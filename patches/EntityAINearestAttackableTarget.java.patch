--- minecraft/src/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java	2016-06-04 22:54:39.989732610 -0700
+++ src/main/java/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java	2016-06-05 00:12:40.698500952 -0700
@@ -46,11 +46,6 @@
          public boolean apply(@Nullable T var1) {
             return var1 == null?false:(var6 != null && !var6.apply(var1)?false:(!EntitySelectors.NOT_SPECTATING.apply(var1)?false:EntityAINearestAttackableTarget.this.isSuitableTarget(var1, false)));
          }
-
-         // $FF: synthetic method
-         public boolean apply(Object var1) {
-            return this.apply((EntityLivingBase)var1);
-         }
       };
    }
 
@@ -58,16 +53,18 @@
       if(this.targetChance > 0 && this.taskOwner.getRNG().nextInt(this.targetChance) != 0) {
          return false;
       } else if(this.targetClass != EntityPlayer.class && this.targetClass != EntityPlayerMP.class) {
-         List var1 = this.taskOwner.worldObj.getEntitiesWithinAABB(this.targetClass, this.getTargetableArea(this.getTargetDistance()), this.targetEntitySelector);
+         List<T> var1 = this.taskOwner.worldObj.getEntitiesWithinAABB(this.targetClass, this.getTargetableArea(this.getTargetDistance()), this.targetEntitySelector);
          if(var1.isEmpty()) {
             return false;
          } else {
             Collections.sort(var1, this.theNearestAttackableTargetSorter);
-            this.targetEntity = (EntityLivingBase)var1.get(0);
+            this.targetEntity = var1.get(0);
             return true;
          }
       } else {
-         this.targetEntity = this.taskOwner.worldObj.getNearestAttackablePlayer(this.taskOwner.posX, this.taskOwner.posY + (double)this.taskOwner.getEyeHeight(), this.taskOwner.posZ, this.getTargetDistance(), this.getTargetDistance(), new Function<EntityPlayer, Double>() {
+         Predicate<T> targetEntitySelectorT = (Predicate<T>) this.targetEntitySelector;
+         Predicate<EntityPlayer> targetEntityPlayerSelector = (Predicate<EntityPlayer>) targetEntitySelectorT;
+         this.targetEntity = (T) this.taskOwner.worldObj.getNearestAttackablePlayer(this.taskOwner.posX, this.taskOwner.posY + (double)this.taskOwner.getEyeHeight(), this.taskOwner.posZ, this.getTargetDistance(), this.getTargetDistance(), new Function<EntityPlayer, Double>() {
             @Nullable
             public Double apply(@Nullable EntityPlayer var1) {
                ItemStack var2 = var1.getItemStackFromSlot(EntityEquipmentSlot.HEAD);
@@ -83,12 +80,7 @@
 
                return Double.valueOf(1.0D);
             }
-
-            // $FF: synthetic method
-            public Object apply(Object var1) {
-               return this.apply((EntityPlayer)var1);
-            }
-         }, this.targetEntitySelector);
+         }, targetEntityPlayerSelector);
          return this.targetEntity != null;
       }
    }
@@ -114,10 +106,5 @@
          double var5 = this.theEntity.getDistanceSqToEntity(var2);
          return var3 < var5?-1:(var3 > var5?1:0);
       }
-
-      // $FF: synthetic method
-      public int compare(Object var1, Object var2) {
-         return this.compare((Entity)var1, (Entity)var2);
-      }
    }
 }
